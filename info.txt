String Calculator

    Create a simple String calculator with a method signature:

    ———————————————

    int Add(string numbers)

    ———————————————

    The method can take up to two numbers, separated by commas, and will return their sum. 

    for example “” or “1” or “1,2” as inputs.

    (for an empty string it will return 0) 

    Hints:

    ——————

     - Start with the simplest test case of an empty string and move to one and two numbers

     - Remember to solve things as simply as possible so that you force yourself to write tests you did not think about

     - Remember to refactor after each passing test

    ———————————————————————————————

    Allow the Add method to handle an unknown amount of numbers

    ————————————————————————————————

    Allow the Add method to handle new lines between numbers (instead of commas).

        the following input is ok: “1\n2,3” (will equal 6)

        the following input is NOT ok: “1,\n” (not need to prove it - just clarifying)

        ——————————————————————————————-

    Support different delimiters

        to change a delimiter, the beginning of the string will contain a separate line that looks like this: “//[delimiter]\n[numbers…]” for example “//;\n1;2” should return three where the default delimiter is ‘;’ .

        the first line is optional. all existing scenarios should still be supported

        ————————————————————————————————

    Calling Add with a negative number will throw an exception “negatives not allowed” - and the negative that was passed. 

    if there are multiple negatives, show all of them in the exception message.

    ————————————————————————————————

    STOP HERE if you are a beginner. Continue if you can finish the steps so far in less than 30 minutes.

    ————————————————————————————————

    Numbers bigger than 1000 should be ignored, so adding 2 + 1001 = 2

    ————————————————————————————————

    Delimiters can be of any length with the following format: “//[delimiter]\n” for example: “//[***]\n1***2***3” should return 6

    ————————————————————————————————

    Allow multiple delimiters like this: “//[delim1][delim2]\n” for example “//[*][%]\n1*2%3” should return 6.

    ————————————————————————————————

    make sure you can also handle multiple delimiters with length longer than one char


#################################

    Tennis
    #########################

1. Each player can have either of these points in one game 0 15 30 40

2. If you have 40 and you win the ball you win the game, however there are special rules.

3. If both have 40 the players are deuce. 
a. If the game is in deuce, the winner of a ball will have advantage and game ball.
 b. If the player with advantage wins the ball he wins the game 
 c. If the player without advantage wins they are back at deuce.

#########################################

 1. A game is won by the first player to have won at least four points in total 
 and at least two points more than the opponent.

2. The running score of each game is described in a manner peculiar to tennis:
 scores from zero to three points are described as “love”, “fifteen”, “thirty”, and “forty” respectively.

3. If at least three points have been scored by each player, and the scores are equal, the score is “deuce”.

4. If at least three points have been scored by each side and a player has one more point than his opponent,
 the score of the game is “advantage” for the player in the lead.